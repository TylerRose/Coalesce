import{_ as o,r as t,o as p,c,b as n,d as a,w as l,e as s,a as i}from"./app.83c59791.js";const r={},D=n("h1",{id:"services",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#services","aria-hidden":"true"},"#"),s(" Services")],-1),d=s("In a Coalesce, you are fairly likely to end up with a need for some API endpoints that aren't closely tied with your regular data model. While you could stick static "),y=s("Methods"),h=s(" on one of your entities, this solution just leads to a jumbled mess of functionality all over your data model that doesn't belong there."),u=n("p",null,[s("Instead, Coalesce allows you to generate API Controllers and a TypeScript client from a service. A service, in this case, is nothing more than a C# class or an interface with methods on it, annotated with "),n("code",null,"[Coalesce,Service]"),s(". An implementation of this class or interface must be injectable from your application's service container, so a registration in Startup.cs is needed.")],-1),v=s("The instance methods of these services work just like other custom "),m=s("Methods"),C=s(" in Coalesce, with one notable distinction: Instance methods don't operate on an instance of a model, but instead on a dependency injected instance of the service."),b=n("h2",{id:"generated-code",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#generated-code","aria-hidden":"true"},"#"),s(" Generated Code")],-1),_=n("p",null,"For each external type found in your application's model, Coalesce will generate:",-1),f=n("li",null,"An API controller with endpoints that correspond to the service's instance methods.",-1),E=s("A TypeScript client containing the members outlined in "),g=s("Methods"),A=s(" for invoking these endpoints."),x=i(`<h2 id="example-service" tabindex="-1"><a class="header-anchor" href="#example-service" aria-hidden="true">#</a> Example Service</h2><p>An example of a service might look something like this:</p><div class="language-c# ext-c# line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#D4D4D4;">[</span><span style="color:#4EC9B0;">Coalesce</span><span style="color:#D4D4D4;">, </span><span style="color:#4EC9B0;">Service</span><span style="color:#D4D4D4;">]</span></span>
<span class="line"><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">interface</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">IWeatherService</span></span>
<span class="line"><span style="color:#D4D4D4;">{</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#4EC9B0;">WeatherData</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">GetWeather</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">string</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">zipCode</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>With an implementation:</p><div class="language-c# ext-c# line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">class</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">WeatherService</span><span style="color:#D4D4D4;"> : </span><span style="color:#4EC9B0;">IWeatherService</span></span>
<span class="line"><span style="color:#D4D4D4;">{</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">WeatherService</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">AppDbContext</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">db</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">    {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">db</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">db</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">WeatherData</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">GetWeather</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">string</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">zipCode</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">    {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#6A9955;">// Assuming some magic HttpGet method that works as follows...</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#569CD6;">var</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">response</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">HttpGet</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;http://www.example.com/api/weather/&quot;</span><span style="color:#D4D4D4;"> + </span><span style="color:#9CDCFE;">zipCode</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">response</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">Body</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">SerializeTo</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">WeatherData</span><span style="color:#D4D4D4;">&gt;();</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">void</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">MethodThatIsNotExposedBecauseItIsNotOnTheExposedInterface</span><span style="color:#D4D4D4;">() {  }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>And a registration:</p><div class="language-c# ext-c# line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">class</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Startup</span><span style="color:#D4D4D4;"> </span></span>
<span class="line"><span style="color:#D4D4D4;">{</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">void</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">ConfigureServices</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">IServiceCollection</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">services</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">    {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#9CDCFE;">services</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">AddCoalesce</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">AppDbContext</span><span style="color:#D4D4D4;">&gt;();</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#9CDCFE;">services</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">AddScoped</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">IWeatherService</span><span style="color:#D4D4D4;">, </span><span style="color:#4EC9B0;">WeatherService</span><span style="color:#D4D4D4;">&gt;();</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>While it isn&#39;t required that an interface for your service exist - you can generate directly from the implementation, it is highly recommended that an interface be used. Interfaces increase testability and reduce risk of accidentally changing the signature of a published API, among other benefits.</p>`,8);function k(B,S){const e=t("RouterLink");return p(),c("div",null,[D,n("p",null,[d,a(e,{to:"/modeling/model-components/methods.html"},{default:l(()=>[y]),_:1}),h]),u,n("p",null,[v,a(e,{to:"/modeling/model-components/methods.html"},{default:l(()=>[m]),_:1}),C]),b,_,n("ul",null,[f,n("li",null,[E,a(e,{to:"/modeling/model-components/methods.html"},{default:l(()=>[g]),_:1}),A])]),x])}const I=o(r,[["render",k],["__file","services.html.vue"]]);export{I as default};
