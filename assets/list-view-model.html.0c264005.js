import{_ as d,r as l,o as r,c,b as e,d as s,w as n,e as t,a as h}from"./app.83c59791.js";const u={},p=e("h1",{id:"typescript-listviewmodels",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#typescript-listviewmodels","aria-hidden":"true"},"#"),t(" TypeScript ListViewModels")],-1),_=t("In addition to "),m=t("TypeScript ViewModels"),f=t(" for interacting with instances of your data classes in TypeScript, Coalesce will also generated a List ViewModel for loading searched, sorted, paginated data from the server."),g=e("p",null,"These ListViewModels, like the ViewModels, are dependent on Knockout and are designed to be used directly from Knockout bindings in your HTML.",-1),b={class:"table-of-contents"},y=t("Base Members"),w=t("Model-Specific Members"),v=t("Configuration"),D=t("Filter Object"),C=t("Static Method Members"),k=t("DataSources"),S=e("h2",{id:"base-members",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#base-members","aria-hidden":"true"},"#"),t(" Base Members")],-1),M=e("p",null,[t("The following members are defined on "),e("code",null,"BaseListViewModel<>"),t(" and are available to the ListViewModels for all of your model types:")],-1),T=e("p",null,"Name of the primary key of the model that this list represents.",-1),x=t("String that is used to control loading and serialization on the server. See "),L=t("Includes String"),V=t(" for more information."),P=e("p",null,"The collection of items that have been loaded from the server.",-1),O=e("p",null,"Adds a new item to the items collection.",-1),N=e("p",null,"Deletes an item and removes it from the items collection.",-1),E=e("p",null,"An arbitrary URL query string to append to the API call when loading the list of items.",-1),K=t("Search criteria for the list. This can be easily bound to with a text box for easy search behavior. See "),I=t("[Search]"),F=t(" for a detailed look at how searching works in Coalesce."),j=e("p",null,"True if the list is loading.",-1),A=e("p",null,"True once the list has been loaded.",-1),B=e("p",null,"Load the list using current parameters for paging, searching, etc Result is placed into the items property.",-1),q=e("p",null,"If a load failed, this is a message about why it failed.",-1),R=e("p",null,"Gets the count of items without getting all the items. Result is placed into the count property.",-1),W=e("p",null,"The result of getCount(), or the total on this page.",-1),J=e("p",null,"Total count of items, even ones that are not on the page.",-1),Q=e("p",null,"Change to the next page.",-1),z=e("p",null,"True if there is another page after the current page.",-1),G=e("p",null,"Change to the previous page.",-1),U=e("p",null,"True if there is another page before the current page.",-1),H=e("p",null,"Page number. This can be set to get a new page.",-1),X=e("p",null,"Total page count",-1),Y=e("p",null,"Number of items on a page.",-1),Z=e("p",null,"Name of a field by which this list will be loaded in ascending order.",-1),$=t("If set to "),ee=e("code",null,'"none"',-1),te=t(", default sorting behavior, including behavior defined with use of "),se=t("[DefaultOrderBy]"),oe=t(" in C# POCOs, is suppressed."),ne=e("p",null,"Name of a field by which this list will be loaded in descending order.",-1),ae=e("p",null,"Toggles sorting between ascending, descending, and no order on the specified field.",-1),ie=e("h2",{id:"model-specific-members",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#model-specific-members","aria-hidden":"true"},"#"),t(" Model-Specific Members")],-1),le=e("h3",{id:"configuration",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#configuration","aria-hidden":"true"},"#"),t(" Configuration")],-1),de=t("A static configuration object for configuring all instances of the ListViewModel's type is created. See "),re=t("ViewModel Configuration"),ce=t("."),he=t("An per-instance configuration object for configuring each specific ListViewModel instance is created. See "),ue=t("ViewModel Configuration"),pe=t("."),_e=e("h3",{id:"filter-object",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#filter-object","aria-hidden":"true"},"#"),t(" Filter Object")],-1),me=e("p",null,[t("For each exposed scalar property on the underlying EF POCO, "),e("code",null,"filter"),t(" will have a corresponding property. If the "),e("code",null,"filter"),t(" object is set, requests made to the server to retrieve data will be passed all the values in this object via the URL's query string. These parameters will filter the resulting data to only rows where the parameter values match the row's values. For example, if "),e("code",null,"filter.companyId"),t(" is set to a value, only people from that company will be returned.")],-1),fe=t("These parameters all allow for freeform string values, allowing the server to implement any kind of filtering logic desired. The "),ge=t("Standard Data Source"),be=t(" will perform the following depending on the property type:"),ye=h(`<ul><li>Dates with a time component will be matched exactly.</li><li>Dates with no time component will match any dates that fell on that day.</li><li>Strings will match exactly unless an asterisk is found, in which case they will be matched with <code>string.StartsWith</code>.</li><li>Enums will match by string or numeric value. Multiple comma-delimited values will create a filter that will match on any of the provided values.</li><li>Numeric values will match exactly. Multiple comma-delimited values will create a filter that will match on any of the provided values.</li></ul><p>Example usage:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#569CD6;">var</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">list</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">ListViewModels</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">PersonList</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#9CDCFE;">list</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">filter</span><span style="color:#D4D4D4;"> = { </span><span style="color:#9CDCFE;">lastName:</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&quot;Erickson&quot;</span><span style="color:#D4D4D4;"> };</span></span>
<span class="line"><span style="color:#9CDCFE;">list</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">load</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="static-method-members" tabindex="-1"><a class="header-anchor" href="#static-method-members" aria-hidden="true">#</a> Static Method Members</h3>`,4),we=t("For each exposed "),ve=t("Static Method"),De=t(" on your POCO, the members outlined in "),Ce=t("Methods - Generated TypeScript"),ke=t(" will be created."),Se=e("h3",{id:"datasources",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#datasources","aria-hidden":"true"},"#"),t(" DataSources")],-1),Me=t("For each of the "),Te=t("Data Sources"),xe=t(" on the class, a corresponding class will be added to a namespace named "),Le=e("code",null,"ListViewModels.<ClassName>DataSources",-1),Ve=t(". This namespace can always be accessed on both "),Pe=e("code",null,"ViewModel",-1),Oe=t(" and "),Ne=e("code",null,"ListViewModel",-1),Ee=t(" instances via the "),Ke=e("code",null,"dataSources",-1),Ie=t(" property, and class instances can be assigned to the "),Fe=e("code",null,"dataSource",-1),je=t(" property.");function Ae(Be,qe){const a=l("RouterLink"),i=l("router-link"),o=l("Prop");return r(),c("div",null,[p,e("p",null,[_,s(a,{to:"/stacks/ko/client/view-model.html"},{default:n(()=>[m]),_:1}),f]),g,e("nav",b,[e("ul",null,[e("li",null,[s(i,{to:"#base-members"},{default:n(()=>[y]),_:1})]),e("li",null,[s(i,{to:"#model-specific-members"},{default:n(()=>[w]),_:1}),e("ul",null,[e("li",null,[s(i,{to:"#configuration"},{default:n(()=>[v]),_:1})]),e("li",null,[s(i,{to:"#filter-object"},{default:n(()=>[D]),_:1})]),e("li",null,[s(i,{to:"#static-method-members"},{default:n(()=>[C]),_:1})]),e("li",null,[s(i,{to:"#datasources"},{default:n(()=>[k]),_:1})])])])])]),S,M,s(o,{def:"modelKeyName: string",lang:"ts"}),T,s(o,{def:"includes: string",lang:"ts"}),e("p",null,[x,s(a,{to:"/concepts/includes.html"},{default:n(()=>[L]),_:1}),V]),s(o,{def:"items: KnockoutObservableArray<TItem>",lang:"ts"}),P,s(o,{def:"addNewItem: (): TItem",lang:"ts"}),O,s(o,{def:"deleteItem: (item: TItem): JQueryPromise<any>",lang:"ts"}),N,s(o,{def:"queryString: string",lang:"ts"}),E,s(o,{def:"search: KnockoutObservable<string>",lang:"ts"}),e("p",null,[K,s(a,{to:"/modeling/model-components/attributes/search.html"},{default:n(()=>[I]),_:1}),F]),s(o,{def:"isLoading: KnockoutObservable<boolean>",lang:"ts"}),j,s(o,{def:"isLoaded: KnockoutObservable<boolean>",lang:"ts"}),A,s(o,{def:"load: (callback?: any): JQueryPromise<any>",lang:"ts"}),B,s(o,{def:"message: KnockoutObservable<string>",lang:"ts"}),q,s(o,{def:"getCount: (callback?: any): JQueryPromise<any>",lang:"ts"}),R,s(o,{def:"count: KnockoutObservable<number>",lang:"ts"}),W,s(o,{def:"totalCount: KnockoutObservable<number>",lang:"ts"}),J,s(o,{def:"nextPage: (): void",lang:"ts"}),Q,s(o,{def:"nextPageEnabled: KnockoutComputed<boolean>",lang:"ts"}),z,s(o,{def:"previousPage: (): void",lang:"ts"}),G,s(o,{def:"previousPageEnabled: KnockoutComputed<boolean>",lang:"ts"}),U,s(o,{def:"page: KnockoutObservable<number>",lang:"ts"}),H,s(o,{def:"pageCount: KnockoutObservable<number>",lang:"ts"}),X,s(o,{def:"pageSize: KnockoutObservable<number>",lang:"ts"}),Y,s(o,{def:"orderBy: KnockoutObservable<string>",lang:"ts"}),Z,e("p",null,[$,ee,te,s(a,{to:"/modeling/model-components/attributes/default-order-by.html"},{default:n(()=>[se]),_:1}),oe]),s(o,{def:"orderByDescending: KnockoutObservable<string>",lang:"ts"}),ne,s(o,{def:"orderByToggle: (field: string): void",lang:"ts"}),ae,ie,le,s(o,{def:"static coalesceConfig: Coalesce.ListViewModelConfiguration<PersonList, ViewModels.Person>",lang:"ts",id:"member-class-config"}),e("p",null,[de,s(a,{to:"/stacks/ko/client/model-config.html"},{default:n(()=>[re]),_:1}),ce]),s(o,{def:"coalesceConfig: Coalesce.ListViewModelConfiguration<PersonList, ViewModels.Person>",lang:"ts",id:"member-instance-config"}),e("p",null,[he,s(a,{to:"/stacks/ko/client/model-config.html"},{default:n(()=>[ue]),_:1}),pe]),_e,s(o,{def:`public filter: {
    personId?: string
    firstName?: string
    lastName?: string
    gender?: string
    companyId?: string
} = null;`,lang:"ts",id:"code-filter-object"}),me,e("p",null,[fe,s(a,{to:"/modeling/model-components/data-sources.html#standard-data-source"},{default:n(()=>[ge]),_:1}),be]),ye,s(o,{def:`public readonly namesStartingWith = new Person.NamesStartingWith(this);
public static NamesStartingWith = class NamesStartingWith extends Coalesce.ClientMethod<PersonList, string[]> { ... };`,lang:"ts",id:"code-static-method-members"}),e("p",null,[we,s(a,{to:"/modeling/model-components/methods.html#static-methods"},{default:n(()=>[ve]),_:1}),De,s(a,{to:"/stacks/ko/client/methods.html"},{default:n(()=>[Ce]),_:1}),ke]),Se,s(o,{def:`
public dataSources = ListViewModels.PersonDataSources;
public dataSource: DataSource<Person> = new this.dataSources.Default();`,lang:"ts",id:"code-data-source-members"}),e("p",null,[Me,s(a,{to:"/modeling/model-components/data-sources.html"},{default:n(()=>[Te]),_:1}),xe,Le,Ve,Pe,Oe,Ne,Ee,Ke,Ie,Fe,je])])}const We=d(u,[["render",Ae],["__file","list-view-model.html.vue"]]);export{We as default};
