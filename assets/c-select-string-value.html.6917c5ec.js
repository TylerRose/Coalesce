import{_ as r,r as o,o as D,c as i,f as c,b as s,d as e,w as a,e as n,a as d}from"./app.83c59791.js";const y={},u=s("h1",{id:"c-select-string-value",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#c-select-string-value","aria-hidden":"true"},"#"),n(" c-select-string-value")],-1),h=s("p",null,"A dropdown component that will present a list of suggested string values from a custom API endpoint. Allows users to input values that aren't provided by the endpoint.",-1),m=s("p",null,"Effectively, this is a server-driven autocomplete list.",-1),C={class:"table-of-contents"},v=n("Examples"),_=n("Props"),b=d(`<h2 id="examples" tabindex="-1"><a class="header-anchor" href="#examples" aria-hidden="true">#</a> Examples</h2><div class="language-vue-html ext-vue-html line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">c-select-string-value</span><span style="color:#D4D4D4;"> </span></span>
<span class="line"><span style="color:#D4D4D4;">    :</span><span style="color:#9CDCFE;">model</span><span style="color:#D4D4D4;">=</span><span style="color:#D4D4D4;">&quot;</span><span style="color:#9CDCFE;">person</span><span style="color:#D4D4D4;">&quot;</span><span style="color:#D4D4D4;"> </span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">for</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;jobTitle&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">method</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;getSuggestedJobTitles&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">/</span><span style="color:#808080;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c# ext-c# line-numbers-mode"><pre class="shiki" style="background-color:#1E1E1E;"><code><span class="line"><span style="color:#569CD6;">class</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Person</span><span style="color:#D4D4D4;"> </span></span>
<span class="line"><span style="color:#D4D4D4;">{</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">int</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">PersonId</span><span style="color:#D4D4D4;"> { </span><span style="color:#569CD6;">get</span><span style="color:#D4D4D4;">; </span><span style="color:#569CD6;">set</span><span style="color:#D4D4D4;">; } </span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">string</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">JobTitle</span><span style="color:#D4D4D4;"> { </span><span style="color:#569CD6;">get</span><span style="color:#D4D4D4;">; </span><span style="color:#569CD6;">set</span><span style="color:#D4D4D4;">; }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    [</span><span style="color:#4EC9B0;">Coalesce</span><span style="color:#D4D4D4;">]</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">public</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">static</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Task</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">ICollection</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#569CD6;">string</span><span style="color:#D4D4D4;">&gt;&gt; </span><span style="color:#DCDCAA;">GetSuggestedJobTitles</span><span style="color:#D4D4D4;">(</span><span style="color:#4EC9B0;">AppDbContext</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">db</span><span style="color:#D4D4D4;">, </span><span style="color:#569CD6;">string</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">search</span><span style="color:#D4D4D4;">) </span></span>
<span class="line"><span style="color:#D4D4D4;">    {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">db</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">People</span></span>
<span class="line"><span style="color:#D4D4D4;">            .</span><span style="color:#DCDCAA;">Select</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">p</span><span style="color:#D4D4D4;"> =&gt; </span><span style="color:#9CDCFE;">p</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">JobTitle</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">            .</span><span style="color:#DCDCAA;">Distinct</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#D4D4D4;">            .</span><span style="color:#DCDCAA;">Where</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">t</span><span style="color:#D4D4D4;"> =&gt; </span><span style="color:#9CDCFE;">t</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">StartsWith</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">search</span><span style="color:#D4D4D4;">))</span></span>
<span class="line"><span style="color:#D4D4D4;">            .</span><span style="color:#DCDCAA;">OrderBy</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">t</span><span style="color:#D4D4D4;"> =&gt; </span><span style="color:#9CDCFE;">t</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">            .</span><span style="color:#DCDCAA;">Take</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">100</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">            .</span><span style="color:#DCDCAA;">ToListAsync</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="props" tabindex="-1"><a class="header-anchor" href="#props" aria-hidden="true">#</a> Props</h2>`,4),g=s("p",null,"A metadata specifier for the value being bound. One of:",-1),f=s("ul",null,[s("li",null,[n("A string with the name of the value belonging to "),s("code",null,"model"),n(".")]),s("li",null,"A direct reference to a metadata object."),s("li",null,"A string in dot-notation that starts with a type name.")],-1),E=s("p",null,[n("An object owning the value that was specified by the "),s("code",null,"for"),n(" prop. If provided, the input will be bound to the corresponding property on the "),s("code",null,"model"),n(" object.")],-1),A=n("The camel-cased name of the "),F=n("Custom Method"),x=n(" to invoke to get the list of valid values. Will be passed a single string parameter "),k=s("code",null,"search",-1),P=n(". Must be a static method on the type of the provided "),w=s("code",null,"model",-1),T=n(" object that returns a collection of strings."),B=n("An optional set of "),S=n("Data Source Standard Parameters"),V=n(" to pass to API calls made to the server."),q=s("p",null,"True if the method should be invoked and the list displayed when the entered search term is blank.",-1);function R(j,I){const t=o("router-link"),l=o("Prop"),p=o("RouterLink");return D(),i("div",null,[u,c(" MARKER:summary "),h,m,c(" MARKER:summary-end "),s("nav",C,[s("ul",null,[s("li",null,[e(t,{to:"#examples"},{default:a(()=>[v]),_:1})]),s("li",null,[e(t,{to:"#props"},{default:a(()=>[_]),_:1})])])]),b,e(l,{def:"for: string | Property | Value",lang:"ts"}),g,f,e(l,{def:"model: Model",lang:"ts"}),E,e(l,{def:"method: string",lang:"ts"}),s("p",null,[A,e(p,{to:"/modeling/model-components/methods.html"},{default:a(()=>[F]),_:1}),x,k,P,w,T]),e(l,{def:"params?: DataSourceParameters",lang:"ts"}),s("p",null,[B,e(p,{to:"/modeling/model-components/data-sources.html#standard-parameters"},{default:a(()=>[S]),_:1}),V]),e(l,{def:"listWhenEmpty?: boolean = false",lang:"ts"}),q])}const N=r(y,[["render",R],["__file","c-select-string-value.html.vue"]]);export{N as default};
